from hikkatl.tl.functions.messages import SendMessageRequest
from hikkatl import events  # üî• –ù–µ —Ö–≤–∞—Ç–∞–ª–æ —ç—Ç–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞!
from .. import loader, utils
import asyncio

@loader.tds
class FCardMatchMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–∞—Ç—á–∞ –≤ –±–æ—Ç–µ @F_CardBot"""
    strings = {"name": "FCardMatch"}

    async def fcardmatchcmd(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Ç—á (–ø—Ä–∏–º–µ—Ä: .fcardmatch)"""
        bot_username = "@F_CardBot"
        await self.client(SendMessageRequest(bot_username, "/start"))
        await utils.answer(message, "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞...")

        # –ñ–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        response = await self.wait_for_bot_response(bot_username)
        if not response:
            await utils.answer(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞")
            return

        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–û–Ω–ª–∞–π–Ω" (–∏–ª–∏ "–ú–∞—Ç—á", –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥—Ä—É–≥–æ–µ)
        for row in response.reply_markup.rows:
            for button in row.buttons:
                if button.text == "–û–Ω–ª–∞–π–Ω":  # üìå –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
                    await button.click()
                    await utils.answer(message, "–ö–Ω–æ–ø–∫–∞ '–û–Ω–ª–∞–π–Ω' –Ω–∞–∂–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.")
                    return

        await utils.answer(message, "–ö–Ω–æ–ø–∫–∞ '–û–Ω–ª–∞–π–Ω' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    async def wait_for_bot_response(self, bot_username, timeout=10):
        """–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
        future = asyncio.Future()

        @self.client.on(events.NewMessage(from_users=bot_username))
        async def handler(event):
            if event.message.media and hasattr(event.message.media, 'buttons'):
                future.set_result(event.message)
                self.client.remove_event_handler(handler)

        try:
            await asyncio.wait_for(future, timeout)
            return future.result()
        except asyncio.TimeoutError:
            return None