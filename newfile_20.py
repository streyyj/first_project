# scope: hikka_only
# meta developer: @d4n13lxx
# name: FCardShowButtons

from .. import loader, utils
from hikkatl.tl.custom import MessageButton
import asyncio

@loader.tds
class FCardShowButtonsMod(loader.Module):
    """–í—ã–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç @F_CardBot"""

    strings = {
        "name": "FCardShowButtons",
        "no_buttons": "‚ùå –í –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –∫–Ω–æ–ø–æ–∫.",
        "buttons_list": "ButtonTitles:\n{}",
        "no_message": "‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç @F_CardBot",
        "timeout_error": "‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª.",
        "debug_info": "üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\nMessage text: {}\nButtons: {}"
    }

    async def client_ready(self, client, db):
        self._client = client

    async def –∫–Ω–æ–ø–∫–∏cmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç @F_CardBot"""
        bot_username = "@F_CardBot"
        timeout = 10  # —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞
        attempts = 20  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        try:
            # üîÅ –û–∂–∏–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
            response = await self._wait_for_new_message(bot_username, timeout, attempts)
            if not response:
                return await utils.answer(message, self.strings["no_message"])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫
            if not response.buttons:
                return await utils.answer(message, self.strings["no_buttons"])

            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
            buttons_text = []
            for row in response.buttons:
                for btn in row:
                    if isinstance(btn, MessageButton):
                        buttons_text.append(f"‚ñ´Ô∏è {btn.text}")

            # –û—Ç–≤–µ—á–∞–µ–º —Å–ø–∏—Å–∫–æ–º –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ –∏—Å—Ö–æ–¥–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await utils.answer(
                message,
                self.strings["buttons_list"].format("\n".join(buttons_text))
            )

        except asyncio.TimeoutError:
            await utils.answer(message, self.strings["timeout_error"])
        except Exception as e:
            await utils.answer(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    async def _wait_for_new_message(self, bot_username, timeout, attempts):
        """–ñ–¥—ë—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"""
        delay = timeout / attempts
        for _ in range(attempts):
            await asyncio.sleep(delay)
            msgs = await self._client.get_messages(bot_username, limit=1)
            if msgs:
                return msgs[0]
        raise asyncio.TimeoutError()