# scope: hikka_only
# meta developer: @d4n13lxx
# name: FCardAutoMatchAndRating

from .. import loader, utils
from hikkatl.tl.custom import MessageButton
from hikkatl import events
import asyncio

@loader.tds
class FCardAutoMatchAndRatingMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ '–ú–∞—Ç—á', '–ò–≥—Ä–∞—Ç—å –º–∞—Ç—á' –∏ '–†–µ–π—Ç–∏–Ω–≥' –≤ @F_CardBot"""

    strings = {
        "name": "FCardAutoMatchAndRating",
        "sending_menu": "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ '–ú–µ–Ω—é'. –û–∂–∏–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫...",
        "clicking_match_button": "üéÆ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ú–∞—Ç—á'",
        "clicking_play_button": "‚öΩÔ∏è –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ò–≥—Ä–∞—Ç—å –º–∞—Ç—á'",
        "clicking_rating_button": "üèÜ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–†–µ–π—Ç–∏–Ω–≥'",
        "done": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ.",
        "timeout_error": "‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª."
    }

    async def client_ready(self, client, db):
        self._client = client

    async def –º–µ–Ω—écmd(self, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å '–ú–µ–Ω—é', –Ω–∞–∂–∞—Ç—å '–ú–∞—Ç—á', '–ò–≥—Ä–∞—Ç—å –º–∞—Ç—á' –∏ –∑–∞—Ç–µ–º '–†–µ–π—Ç–∏–Ω–≥'"""
        bot_username = "@F_CardBot"
        timeout = 10  # —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞

        await utils.answer(message, self.strings["sending_menu"])
        await self._client.send_message(bot_username, "–ú–µ–Ω—é")

        try:
            # üîÅ –®–∞–≥ 1: –ñ–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã "–ú–µ–Ω—é"
            response = await self._wait_for_new_message(bot_username, timeout)
            if not response or not response.buttons:
                return await utils.answer(message, f"‚ùå –ö–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–æ–±—â–µ–Ω–∏–µ: {response.text if response else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}")

            # üîò –ù–∞–∂–∏–º–∞–µ–º "–ú–∞—Ç—á"
            match_button = self._find_button(response, "–ú–∞—Ç—á")
            if not match_button:
                return await utils.answer(message, "‚ùå –ö–Ω–æ–ø–∫–∞ '–ú–∞—Ç—á' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await match_button.click()
            await utils.answer(message, self.strings["clicking_match_button"])

            # üîÅ –®–∞–≥ 2: –ñ–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ "–ú–∞—Ç—á"
            play_response = await self._wait_for_new_message(bot_username, timeout)
            if not play_response or not play_response.buttons:
                return await utils.answer(message, f"‚ùå –ö–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–æ–±—â–µ–Ω–∏–µ: {play_response.text if play_response else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}")

            # üîò –ù–∞–∂–∏–º–∞–µ–º "–ò–≥—Ä–∞—Ç—å –º–∞—Ç—á"
            play_button = self._find_button(play_response, "–ò–≥—Ä–∞—Ç—å –º–∞—Ç—á")
            if not play_button:
                return await utils.answer(message, "‚ùå –ö–Ω–æ–ø–∫–∞ '–ò–≥—Ä–∞—Ç—å –º–∞—Ç—á' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await play_button.click()
            await utils.answer(message, self.strings["clicking_play_button"])

            # üîÅ –®–∞–≥ 3: –ñ–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ "–ò–≥—Ä–∞—Ç—å –º–∞—Ç—á"
            rating_response = await self._wait_for_new_message(bot_username, timeout)
            if not rating_response or not rating_response.buttons:
                return await utils.answer(message, f"‚ùå –ö–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–æ–±—â–µ–Ω–∏–µ: {rating_response.text if rating_response else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}")

            # üîò –ù–∞–∂–∏–º–∞–µ–º "–†–µ–π—Ç–∏–Ω–≥"
            rating_button = self._find_button(rating_response, "–†–µ–π—Ç–∏–Ω–≥")
            if not rating_button:
                return await utils.answer(message, "‚ùå –ö–Ω–æ–ø–∫–∞ '–†–µ–π—Ç–∏–Ω–≥' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await rating_button.click()
            await utils.answer(message, self.strings["clicking_rating_button"])

            await utils.answer(message, self.strings["done"])

        except asyncio.TimeoutError:
            await utils.answer(message, self.strings["timeout_error"])
        except Exception as e:
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def _wait_for_new_message(self, bot_username, timeout):
        """–ñ–¥—ë—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"""
        event = await self._client.wait_for(
            events.NewMessage(from_users=bot_username),
            timeout=timeout
        )
        return event.message

    def _find_button(self, message, keyword):
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ"""
        if not message.buttons:
            return None
        for row in message.buttons:
            for btn in row:
                if isinstance(btn, MessageButton) and keyword in btn.text:
                    return btn
        return None